<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Actually, less is more!</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 03 Aug 2018 09:42:35 +0800</pubDate>
    <lastBuildDate>Fri, 03 Aug 2018 09:42:35 +0800</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>Python基础</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#一基本数据类型&quot; id=&quot;markdown-toc-一基本数据类型&quot;&gt;一、基本数据类型&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-数字&quot; id=&quot;markdown-toc-1-数字&quot;&gt;1、 数字&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2字符串&quot; id=&quot;markdown-toc-2字符串&quot;&gt;2、字符串&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-列表list&quot; id=&quot;markdown-toc-3-列表list&quot;&gt;3、 列表(List)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#4-元组&quot; id=&quot;markdown-toc-4-元组&quot;&gt;4、 元组&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#5-集合&quot; id=&quot;markdown-toc-5-集合&quot;&gt;5 、集合&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#6-字典&quot; id=&quot;markdown-toc-6-字典&quot;&gt;6、 字典&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#二if_else-分支&quot; id=&quot;markdown-toc-二if_else-分支&quot;&gt;二、if_else 分支&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#三-循环&quot; id=&quot;markdown-toc-三-循环&quot;&gt;三、 循环&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#四函数&quot; id=&quot;markdown-toc-四函数&quot;&gt;四、函数&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#五导入模块&quot; id=&quot;markdown-toc-五导入模块&quot;&gt;五、导入模块&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1初识模块&quot; id=&quot;markdown-toc-1初识模块&quot;&gt;1、初识模块&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#2-深入模块&quot; id=&quot;markdown-toc-2-深入模块&quot;&gt;2、 深入模块&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#六输入输出&quot; id=&quot;markdown-toc-六输入输出&quot;&gt;六、输入输出&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#七异常处理&quot; id=&quot;markdown-toc-七异常处理&quot;&gt;七、异常处理&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#八类&quot; id=&quot;markdown-toc-八类&quot;&gt;八、类&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#九常用标准模块&quot; id=&quot;markdown-toc-九常用标准模块&quot;&gt;九、常用标准模块&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#十常用内置方法&quot; id=&quot;markdown-toc-十常用内置方法&quot;&gt;十、常用内置方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;一基本数据类型&quot;&gt;一、基本数据类型&lt;/h4&gt;
&lt;p&gt;python3中有六种标准的数据类型：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Numbers  数字&lt;/li&gt;
  &lt;li&gt;String 字符串&lt;/li&gt;
  &lt;li&gt;List 列表&lt;/li&gt;
  &lt;li&gt;Tuple 元祖&lt;/li&gt;
  &lt;li&gt;Sets 集合&lt;/li&gt;
  &lt;li&gt;Dictionaries 字典&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;1-数字&quot;&gt;1、 数字&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a,b,c,d,e=20,5.5,True,4+3j,&quot;abc&quot;;
print(a,&quot;\t&quot;,b,&quot;\t&quot;,c,&quot;\t&quot;,d,&quot;\t&quot;,e);
#可使用type()函数查看变量的数据类型
print(type(a),type(b),type(c),type(d),type(e));

#数值运算（+ - × / 幂  取余 类型转换）
a=2+3;
print(a);
b=50-5*6;
print(b);
c=(50-5*6)/4;
print(c);
d=8/5;
print(d);
#除法总会返回一个浮点数
e=17/3;
print(e);
#如果想保留整数部分  使用 //
f=17//3;  #5
print(f);

g=17%3;
print(g);

#幂运算
h=5**2;
print(h);
#求平方跟  此种方法只能求正数的平方根
sqrt=4**0.5
print('sqrt',sqrt)
#也可使用cmath中的 sqrt()函数来求平方根
import cmath
num_sqrt=cmath.sqrt(-8)
print(num_sqrt)

#类型转换  不同类型的数最终会转换为浮点数
i=3*3.75/1.5;
print(i);

j=3.0*2;
print(j);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;2字符串&quot;&gt;2、字符串&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
字符串使用单引号或者双引号括起来   同时使用\转义特殊字符   



s='Yes,he doesn\'t';
print(s,type(s),len(s));

#如果不想让反斜杠发生转义  可以在字符串前面添加一个r,表示原始字符串
print('C:\some\name');
C:\some
ame


print(r'C:\some\name');
#C:\some\name  原样输出

#反斜杠可以作为续行符，表示下一行是上一行的延续
st='aaaaaaaaaaaaaaaaaaa\
bbbbbbbbbbbbbbbbbbbbb';
print(st);
#aaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbb

#可使用 '''.....'''跨越多行

str1='''
aaa
 bbb
   ccc
''';
print(str1);

aaa
 bbb
   ccc


#字符串可以使用 + 连接   * 运算符重复
print('str'+'ing','my'*3);
string mymymy

#两个紧邻的会自动拼接到一起
str3='hello' 'word';
print(str3);
hello word

#字符串的索引和切片
两种索引方式：
  1、从左往右 从0开始依次增加  
  2、从右往左  从-1开始 依次减少  
注意：Python中没有单独的字符类型，一个字符就是长度为一的字符串  
默认第一个索引为0，第二个索引默认为字符串可以被分切的长度  
切分字符串的时候有一个很有用的规律   word[:i]+word[i:]=word  

word='Python';
print(word[0],word[5]);
print(word[-6],word[-1]);  #两个输出结果一致

print(word[:2]);  # Py
print(word[2:]);  #thon
#一个过大索引将被字符串的大小取代   索引的上限值小于下限值  将返回一个空字符串
print(word[:100]);
print(word[20:]);  #20&amp;gt;0 空
print(word[2:1]);

#对字符串切片得到一串子串   格式 变量名[头下标：尾下标]   范围 前闭后开
print(word[0:3]);
print(word);#切片并不会对原字符进行改变

#需要注意的是 Python中的字符串是不可变的 向一个索引位置赋值，比如 word[0]='m' 会导致错误

#可以使用内置函数返回字符串的长度
print(len(word));

#字符串的判断
#可判断大小写  是否为字母  开头等

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;3-列表list&quot;&gt;3、 列表(List)&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Python中使用最频繁的数据类型
a=['him',25,100,'her'];
print(a);
#同字符串  列表也支持切片和串联(+)操作  不同的是 列表中的元素是可以改变的
print(a[:3]);
a+=['zhangsan',100];
print(a);
a[0]='hh';
print(a);

#使用enumerate() 方法 同时获得索引位置和对应值
for i,v in enumerate(a):
    print(i,v)


#List的内置方法
#增 append()在末尾添加  extend() 合并进来一个列表
a.append(&quot;zhaoliu&quot;);
print(a);
a.insert(2,'lisi');
print(a);
b=[1,2,4];
a.extend(b);
print(a);

#改
a[0]='wangwu';
print(a);
#修改指定区间的列表值
a[2:5]=['B','C','D'];
print(a)
a[3:6]=[];#移除值
print(a)

#反转
a.reverse();
print(a);
#排序
#a.sort();  需都是字符串或者都是数字  否则无法进行比较
print(a);#按照ASCLL进行排序

#拷贝
a1=a.copy();
print(a1);
#查
print(a.index('wangwu'));#该元素所在位置的下标
print(a.count('wangwu'));#统计出现了几次
#同时遍历两个或者更多的序列  可以使用 zip（） 组合
questions=['names','quest','favorite color']
answers=['lancelot','the holy grail','blue']
for q,an in zip(questions,answers):
    print(&quot;What is your {0}? It is {1}.&quot;.format(q,an))

#遍历
for i in a:
    print(i);
#删
#清空列表

a.remove('wangwu');
print(a);
a.pop();
print(&quot;pop:&quot;,a); #删除尾部元素
a[:]=[];
print(a);
a.clear();
del a;
#print(a);此时  a已经是未定义的变量
#可使用列表的这些内置函数实现数据结构
#栈
stack=[3,4,5]
stack.append(6)
stack.append(7)
print(stack)

stack.pop()

print(stack)


#队列
from collections import deque
queue=deque(['Eric','John','Michal'])
queue.append('Terry')
queue.append('Graham')
print(queue)
queue.popleft()
print(queue)


#列表推导式
vec=[2,4,6]
ax=[3*x for x in vec]
print(ax)

bx=[[x,x**2] for x in vec]
print(bx)   #[[2, 4], [4, 16], [6, 36]]

#可使用 if 字句作为过滤器
cx=[3*x for x in vec if x&amp;gt;3]
print(cx)

vec1=[2,4,6]
vec2=[4,3,-9]
vec3=[x*y for x in vec1 for y in vec2]
print(vec3)

vec4=[vec1[i]*vec2[i] for i in range(len(vec1))]
print(vec4)
#列表推导式可以使用复杂表达式或嵌套函数
vec5=[str(round(355/113,i)) for i in range(1,6)]  #当你在文件中定义了一个str变量时  此处的str()就会报错
print(vec5)

#嵌套列表的解析
martrix=[
    [1,2,3,4],
    [5,6,7,8],
    [9,10,11,12]
]
ch=[[row[i] for row in martrix] for i in range(4)]
print(ch)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;4-元组&quot;&gt;4、 元组&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#与列表相似  只是 列表中的元素是不可改变的
c=(1990,2018,'python','c++');
print(c);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;5-集合&quot;&gt;5 、集合&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#集合  无序不重复的的集  可使用{}  或者 set()来创建
student={'zhangsan','zhangsan','lisi','lisi','wangwu'};
print(student);  #{'wangwu', 'lisi', 'zhangsan'}  重复元素自动去掉
#创建一个空的集合
stu=set();
print(stu);
print('zhangsan' in student);  #判断元素是否在集合中

e=set('abracadabra');
print(e);  #{'a', 'c', 'b', 'r', 'd'}
f=set('alacazam');
print(f);


#差集
print(e-f);
#并集
print(e|f);
#交集
print(e&amp;amp;f);
# 两个集合不同时存在的元素
print(e^f);

#集合也支持推导式

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h5 id=&quot;6-字典&quot;&gt;6、 字典&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 无序的 键值对集合  其关键字  也就是键  必须是不可变类型  并且同一个字典中  键不可相同  
 #key-value的数据类型
#语法
info={
	'stu1101':&quot;zhangsan&quot;,
    'stu1102':'lisi',
    'stu1103':['wangwu',18]
}
#字典是无序的   因为它不需要下标

#查找
print(info['stu1101'])
#print(info['stu1104']);#不存在会报错
print(info.get(&quot;stu1101&quot;)) #安全的获取方法   元素不存在就会输出 none
print(info.get('stu1104')); #None
print('stu1103' in info) # 判断某个元素是否在列表中
print(info.get('stu1103'));

#修改
info['stu1102']='xiaolan';
print(info)

#修改不存在的key值   则是创建一条
info['stu1104']='xiaoming';
print(info);





#删除
del  info[&quot;stu1101&quot;]
print(info);
info.pop(&quot;stu1102&quot;)
print(info)
info.popitem()#随机删除   别用
print(info);

print(info.items()); #把一个字典转换为列表



#字典的遍历
for i in info:
	print(i,info[i]);


for k,v in info.items():
	print(k,v)  #不要使用它   因为要把字典转换为列表  如果字典非常的大  光转换都得很长的时间

#也可使用dict()函数直接对键值对元祖列表中构建字典
mydict=dict([('saoe',4139),('guido',4127),('jack',4098)])
print(mydict)
#如果关键字只是简单的字符串  使用关键字参数指定键值对有时候更方便
mydict1=dict(space=4139,guido=4127,jack=4098)
print(mydict)


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;二if_else-分支&quot;&gt;二、if_else 分支&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;age=int(input(&quot;Age of the dog:&quot;))
print()
if age&amp;lt;=0:
    print(&quot;the can hardly be true!&quot;)
elif age==1:
    print(&quot;about 14 human years&quot;)
elif age==2:
    print(&quot;about 22 human years&quot;)
elif age&amp;gt;2:
    human=22+(age-2)*5
    print(&quot;Human years:&quot;,human)

###
input(&quot;press Return&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;三-循环&quot;&gt;三、 循环&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#while
n=100

sum=0
counter=1
while counter&amp;lt;=n:
    sum=sum+counter
    counter+=1
print(&quot;Sum 0f 1 until %d:%d&quot;%(n,sum))

#for  与C语言不同的是 for循环也可以有 else块
languages=[&quot;c&quot;,&quot;C++&quot;,&quot;Perl&quot;,&quot;Python&quot;]
for x in languages:
    print(x);

#break
edibles=[&quot;ham&quot;,&quot;spam&quot;,&quot;eggs&quot;,&quot;nuts&quot;]
for food in edibles:
    if food==&quot;spam&quot;:
        print(&quot;No more spam please!&quot;)
        break
    print(&quot;Great,delicious&quot;+food)
else:
    print(&quot;I am so glad: No spam!&quot;)
print(&quot;Finally, I finished stuffing myself&quot;)

#range()函数  用于遍历数字序列
for i in range(5):
    print(i)
for i in range(5,9):
    print(i);
#range()函数也可指定步长
for i in range(0,10,3):
    print(i)


#负数
for i in range(-10,-100,-30):
    print(i)

#也可以借助 range()和len()函数以遍历一个序列的索引
a=['Mary','had','a','little','lamb']
for i in range(len(a)):
    print(i,a[i])

#也可以使用range()函数来构建一个列表
l=list(range(5))
print(l)


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;四函数&quot;&gt;四、函数&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def hello():
    print(&quot;hello world！&quot;)

hello()


def area(width,height):
    return width*height
def print_welcome(name):
    print(&quot;Welcome&quot;,name)
print_welcome(&quot;Fred&quot;)
w=4
h=5
print(&quot;width=&quot;,w,&quot;height=&quot;,h,&quot;area=&quot;,area(w,h))

#可变参数列表
def arithmetic_mean(*args):
    sum=0;
    for x in args:
        sum+=x
    return sum

print(arithmetic_mean(45,32,89,78))
print(arithmetic_mean(45))
print(arithmetic_mean())

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;五导入模块&quot;&gt;五、导入模块&lt;/h4&gt;
&lt;h5 id=&quot;1初识模块&quot;&gt;1、初识模块&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import sys

sys.py
import sys
不可使用 
当前目录下不可存在要引入模块的同名文件，否则就会被屏蔽掉
#查看系统的环境变量
print('命令行参数如下：')
for i in sys.argv:
    print(i)
print('/n/nThe PythonPATH is',sys.path,'/n')
#自定义模块  自定义模块可放在当前目录  或者 sys.path中的一个目录中  一般放在 site_packages 下
# '/home/nwpu/PycharmProjects/practice/venv/lib/python3.5/site-packages'
import fibo
fibo.fib(10)
fibo.fib2(10)
#导入模块并没有把定义在fibo中的含糊名称写在当前符号表里，只是把模块fibo的名字写在了那里
#如果打算经常使用一个函数，你可以把它赋给一个本地的名称
fib=fibo.fib
fib(100)
#可以使用内置函数以字符串格式返回模块内定义的所有名称
mydir=dir(fibo)
print(mydir)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;2-深入模块&quot;&gt;2、 深入模块&lt;/h6&gt;

&lt;p&gt;__name__属性&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;test.py文件中代码如下：
print(&quot;I'm the first.&quot;)
print(__name__)
if __name__==&quot;__main__&quot;:
     print(&quot;I'm the second.&quot;)

import_test.py中代码如下：
import test 

直接执行test.py结果如下
I'm the first.
__main__
I'm the second.

执行 import_test.py结果如下：
I'm the first.
test

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:red;&quot;&gt;
可以得出结论：若一个Python文件为正在执行文件时
__name__==”__main__“,否则它等于其文件名
&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;六输入输出&quot;&gt;六、输入输出&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#Python 中输入与输出

# 1、表达式  终端下采取交互式的方式输入的时候
#2、print()函数
#3、write()
#4、如果想要输出的形式更加多样 采用str.format()函数来格式化输出值
#5、若希望将输出的值转换为字符串，可以使用 repr()或者str()函数来实现

str1=str(1/7)
print(str1)

str2=repr(str1)  #0.14285714285714285
print(str2)  #'0.14285714285714285'

x=10*3.25
y=200*300
s='The value x is '+repr(x)+',and y is '+repr(y)+'...'
print(s)  #repr() 函数可以转义字符串中的特殊字符

for x in range(1,11):
    print('{0:2d}{1:3d}{2:4d}'.format(x,x*x,x*x*x)) #{}及里面的格式化字段都会被format（）中的参数置换掉

import math
print('The value of PI is approxiamtely {0:.3f}'.format(math.pi))#小数点后暴露三位
#zfill()方法会在左边填0
str3='12'.zfill(5)
print(str3)


#读和写文件
#open()函数将会返回一个file对象  file(filename,mode)
# f.read(size) 读取一定目的个数的数据  如果size的值不写或者为负值  则所有的数据都会被读取出来
#f.readline()函数将会读取一行  如果返回空字符串则说明已经读取到最后一行
f=open('/tmp/test','r')
print(f.read())
f.close()

fp=open('/tmp/test','r')
i=0;
while(fp.readline()!=''): #逐行读取出来
    print(str(i)+fp.readline())
    i=i+1

fp.close()

fp1=open('/tmp/test','r')
print(fp1.readlines())#所有的内容返回一个字典
fp1.close()

#也可采用迭代的方式进行读取
fp2=open('/tmp/test','r')
for line in fp2:
    print(line,end='')
fp2.close()

#可以使用write()方法将内容写入进去
fp3=open('/tmp/test','w')  # w会覆盖掉原有的内容  a是追加
fp3.write('Hello world!!!')

num=1000
strnum=str(num)
fp3.write(strnum) #如果想给文件中写入非字符串的东西  需现将其转换为字符串

#f.tell()返回对象所处的位置  它是从文件开头算起的字节数
print(fp3.tell())

#f.seek()
#fp3.seek(x,0) 从文件开头移动x个位置
#fp3.seek(x,1) 从当前位置往后移动x个位置
#fp3.seek(-x,2) 从文件结尾移动X个位置


#pickle模块  实现基本的数据序列和反序列化  它可以把 列表  字符串等保存到文件中  并且可以解析处理啊
import pickle
data1={'a':[1,2.0,3,4+6j],
       'b':('string',u'Unicode string'),
       'c':None}
selfref_list=[1,2,3]
selfref_list.append(selfref_list)
output=open('/tmp/data.pk1','wb')
pickle.dump(data1,output)
pickle.dump(selfref_list,output,-1)
output.close()

#对刚才保存的内容进行解析
pk1_file=open('data.pk1','rb')
data1=pickle.load('data.pk1','rb')
data1=pickle

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;七异常处理&quot;&gt;七、异常处理&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#异常处理
while True:
    try:
        x=int(input(&quot;Please enter a number&quot;))
        break
    except ValueError:
        print(&quot;Oops! That was no valid number. Try again&quot;)


#try except 还有一个可选的else 语句 可以把文件关闭等必要的操作放在else语句中去

import sys
for arg in sys.argv[1:]:
    try:
        f=open(arg,'r')
    except IOError:
        print(&quot;can on open&quot;,arg)
    else:
        print(arg,'has',len(f.readlines()),'lines')
        f.close()


#抛出异常
try:
    raise NameError('HiThere')
except NameError:
    print('An exception flew by!')
    raise


#自定义异常  异常应该继承自Exception类 或者直接继承  或者间接继承
class MyError(Exception):
    def _init_(self,value):
        self.value=value
    def __str__(self):
        return repr(self.value)

try:
    raise  MyError(2*2)
except MyError as e:
    print('My exception occured,value:',e.value)

#finnaly中的语句一定会被执行

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;八类&quot;&gt;八、类&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class people:
    #定义基本属性
    name=''
    age=0

    #定义私有属性，私有属性在类外部无法直接访问
    _weight=0
    #_init_() 类似与  类似于C++中的构造方法  可以有参数

    def _init_(self,n,a,w):
        self.name=n
        self.age=a
        self._weight=w
    #类方法必须有参数 self 并且必须为第一个参数
    def speak(self):
        print(&quot;%s is speaking: I am %d years old&quot;%(self.name,self.age))

p=people('tom',10,30)
p.speak()

#类的继承--单继承
class student(people):
    grade=''
    def _init_(self,n,a,w,g):
        #调用父类的构造函数
        people._init_(self,n,a,w)
        self.grade=g
    #复写父类的方法
    def speak(self):
        print(&quot;%s is speaking: I am %d years old,and i am in grade %d&quot;%(self.name,self.age,self.grade))

s=student('ken',20,60,3)
s.speak()

class speaker:
    topic=''
    name=''
    def _init_(self,n,t):
        self.name=n
        self.topic=t
    def speak(self):
        print(&quot;I am %s,I am a speaker! My topic is %s&quot;%(self.name,self.topic))


class sample(speaker,student):
    a=''
    def _init_(self,n,a,w,g,t):
        student._init_(self,n,a,w,g)
        speaker._init_(self,n,t)
test=sample(&quot;Tim&quot;,25,80,4,&quot;Python&quot;)
test.speak()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;九常用标准模块&quot;&gt;九、常用标准模块&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import os
pt=os.getcwd() #返回当前的工作目录
print(pt)
#os.chdir('/tmp')  #修改当前的工作目录

#os.system('mkdir tody')  #执行系统命令 mkdir  由于刚才切换工作目录是在 /tmp目录下  因此文件被创建在/tmp下
#建议使用 import os  而不是使用 from os import  这样 os.open()不会覆盖掉 open()

#文件通配符  glob
import glob
mylist=glob.glob('*.py')
print(mylist)

#命令行参数
import sys
print(sys.argv)

sys.stderr.write('Warning,log file not found starting a new one\n')

#字符串正则匹配
import  re
re.finditer(r'\bf[a-z]*','which foot or hand fell fastest')

re.sub(r'(\b[a-z]+) \1',r'\1','cat in the hat')

import math
mycos=math.cos(math.pi/4)
mylog=math.log(1024,2)
print(mycos)
print(mylog)

#random
import random
myrandom=random.choice(['apple','pear','banana'])
print(myrandom)  #apple  随机选取一个

#产生0-9之间的随机数
print(&quot;0-9之间的随机数&quot;,random.randint(0,9))

myrandom1=random.sample(range(100),10)
print(myrandom1)
myrandom2=random.random()
print(myrandom2)

#访问互联网  用到再说

#日期和时间 datetime 模块为日期和时间处理同时提供了简单和复杂的方法
from datetime import  date
now=date.today()
print(now)
#使用日历模块显示日期
import calendar
yy=int(input(&quot;输入月份：&quot;))
mm=int(input(&quot;输入年份:&quot;))
print(calendar.month(yy,mm))
#也可计算每个月的天数
monthRange=calendar.monthrange(2013,6)
print(monthRange)  #(5,30)  意思是6月份有30天


#数据压缩
import zlib
s=b'witch witch has which witches wrist watch'
print(len(s))
t=zlib.compress(s)
print(len(t))


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;十常用内置方法&quot;&gt;十、常用内置方法&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#直接使用max()函数即可输出最大和最小值
print(max(1,2))


#进制转换
dec=int(input(&quot;输入数字：&quot;))
print(&quot;十进制为&quot;,dec,&quot;:&quot;)
print(&quot;转换为二进制为：&quot;,bin(dec))
print(&quot;转换为八进制为：&quot;,oct(dec))
print(&quot;转换为十六进制为：&quot;,hex(dec))


#ASCII与字符之间的转换
c=input(&quot;请输入一个字符：&quot;)
a=int(input(&quot;请输入一个ASCII码：&quot;))
print(c+&quot;的ASCLL码为&quot;,ord(c))
print(a,&quot;对应的字符为&quot;,chr(a))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 31 Jul 2018 14:37:01 +0800</pubDate>
        <link>http://localhost:4000/2018/07/31/study-python/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/07/31/study-python/</guid>
        
        <category>Python</category>
        
        
        <category>学习笔记</category>
        
      </item>
    
      <item>
        <title>使用Maven部署基于JAX-WS的 WebService</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1jax-ws概述&quot; id=&quot;markdown-toc-1jax-ws概述&quot;&gt;1、JAX-WS概述&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2使用maven构建webservice项目&quot; id=&quot;markdown-toc-2使用maven构建webservice项目&quot;&gt;2、使用maven构建WebService项目&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1jax-ws概述&quot;&gt;1、JAX-WS概述&lt;/h4&gt;

&lt;p&gt;JAX-WS2.0 的全称为 Java API for XML-Based Webservices (JAX-WS) 2.0。JAX-WS 2.0 是对 JAX-RPC 1.0 规范的扩展，是 JAX-RPC 1.1 的后续版本， JAX-RPC 2.0 标准发布不久后便被重新命名为 JAX-WS 2.0。 JAX-WS 2.0 是面向 Java 5 的开发 Web services 的最新编程标准，它提供了新的编程模型和对以往的 JAX-RPC 方式的 Web services 进行了增强。 JAX-WS2.0 (JSR 224)是Sun新的web services协议栈，是一个完全基于标准的实现。在binding层，使用的是the Java Architecture for XMLBinding (JAXB, JSR 222)，在parsing层，使用的是the Streaming API for XML (StAX, JSR 173)，同时它还完全支持schema规范。&lt;/p&gt;

&lt;h4 id=&quot;2使用maven构建webservice项目&quot;&gt;2、使用maven构建WebService项目&lt;/h4&gt;
&lt;p&gt;项目架构:&lt;br /&gt;
  &lt;img src=&quot;/styles/images/2018-7-31/1.jpg&quot; alt=&quot;deploy&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1、 创建服务接口&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 
&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nwpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;soap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOAPBinding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;soap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOAPBinding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebService&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOAPBinding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RPC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HelloWorldService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	 &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebMethod&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;2、  服务接口实现&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 
 &lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nwpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceimpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nwpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloWorldService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endpointInterface&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cn.nwpu.service.HelloWorldService&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HelloWorldServiceImpl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HelloWorldService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TODO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generated&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stub&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello from Programmer Gate ..&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;3、  创建 sun-jaxws.xml&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 
 &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;endpoints
  xmlns=&quot;http://java.sun.com/xml/ns/jax-ws/ri/runtime&quot;
  version=&quot;2.0&quot;&amp;gt;
  &amp;lt;endpoint
      name=&quot;HelloWorldService&quot;
      implementation=&quot;cn.nwpu.serviceimpl.HelloWorldServiceImpl&quot;
      url-pattern=&quot;/hello&quot;/&amp;gt;
&amp;lt;/endpoints&amp;gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4、  创建web.xml&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;web-app&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MavenJax&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3.1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;display-name&amp;gt;&lt;/span&gt;MavenJax&lt;span class=&quot;nt&quot;&gt;&amp;lt;/display-name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file-list&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;index.html&lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;index.htm&lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;index.jsp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;default.html&lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;default.htm&lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;default.jsp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file-list&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;listener&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;listener-class&amp;gt;&lt;/span&gt;
                com.sun.xml.ws.transport.http.servlet.WSServletContextListener
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/listener-class&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/listener&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;hello&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;
            com.sun.xml.ws.transport.http.servlet.WSServlet
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;load-on-startup&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/load-on-startup&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;hello&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/hello&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;session-config&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;session-timeout&amp;gt;&lt;/span&gt;120&lt;span class=&quot;nt&quot;&gt;&amp;lt;/session-timeout&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/session-config&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/web-app&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;5、  在pom.xml文件中导入依赖&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
  &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
  &amp;lt;groupId&amp;gt;cn.nwpu&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;MavenJax&amp;lt;/artifactId&amp;gt;
  &amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt;
  &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;
  
  &amp;lt;dependencies&amp;gt;
	&amp;lt;dependency&amp;gt;
		&amp;lt;groupId&amp;gt;com.sun.xml.ws&amp;lt;/groupId&amp;gt;
		&amp;lt;artifactId&amp;gt;jaxws-rt&amp;lt;/artifactId&amp;gt;
		&amp;lt;version&amp;gt;2.2.10&amp;lt;/version&amp;gt;
	&amp;lt;/dependency&amp;gt;
  	&amp;lt;dependency&amp;gt;
	    &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt;
	    &amp;lt;artifactId&amp;gt;javax.servlet-api&amp;lt;/artifactId&amp;gt;
	    &amp;lt;version&amp;gt;3.1.0&amp;lt;/version&amp;gt;
	    &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
	&amp;lt;/dependency&amp;gt;
	&amp;lt;dependency&amp;gt; 
	   &amp;lt;groupId&amp;gt;javax.servlet.jsp&amp;lt;/groupId&amp;gt; 
	   &amp;lt;artifactId&amp;gt;jsp-api&amp;lt;/artifactId&amp;gt; 
	   &amp;lt;version&amp;gt;2.1&amp;lt;/version&amp;gt; 
	   &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
	&amp;lt;/dependency&amp;gt;
  &amp;lt;/dependencies&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;6、 run on server &lt;br /&gt;
 即可通过 localhost:8080/as?wsdl 访问&lt;/p&gt;

</description>
        <pubDate>Tue, 31 Jul 2018 14:37:01 +0800</pubDate>
        <link>http://localhost:4000/2018/07/31/jax-ws-webservice/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/07/31/jax-ws-webservice/</guid>
        
        <category>Web Service</category>
        
        
        <category>教程</category>
        
      </item>
    
      <item>
        <title>初识Web Service</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1何为-web-service&quot; id=&quot;markdown-toc-1何为-web-service&quot;&gt;1、何为 Web Service?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2webservice的组件&quot; id=&quot;markdown-toc-2webservice的组件&quot;&gt;2、WebService的组件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3应用实例&quot; id=&quot;markdown-toc-3应用实例&quot;&gt;3、应用实例&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4为什么使用webservice&quot; id=&quot;markdown-toc-4为什么使用webservice&quot;&gt;4、为什么使用WebService&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5快速开始&quot; id=&quot;markdown-toc-5快速开始&quot;&gt;5、快速开始&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1何为-web-service&quot;&gt;1、何为 Web Service?&lt;/h4&gt;
&lt;p&gt;（1）它使得本地应用软件所提供的服务可以通过网络在远程得到使用，它们之间的消息传递是通过XML文件进行的。因此，Web Service不受操作系统和编程语言的限制，例如Ubuntu可以与Windows进行通信，Java可以与Python 进行通信。
（2）Web Service 基于像TCP/IP、HTTP、Java、HTML和XML等这些开放标准构建的，因此可以构建本地的、分布式的或者基于web的应用。&lt;/p&gt;
&lt;h4 id=&quot;2webservice的组件&quot;&gt;2、WebService的组件&lt;/h4&gt;
&lt;p&gt;Web Service 的基础是XML+HTTP,W所有的Web Service 都会用到以下组件:&lt;br /&gt;
（1）SOAP(Simple Object Access Protocol)&lt;a href=&quot;http://www.w3.org/TR/2003/REC-soap12-part0-20030624/&quot;&gt;SOAP1.2&lt;/a&gt;&lt;br /&gt;
简单对象访问协议，用来描述传递信息的格式，它是基于XML的协议。主要有以下优点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;它是一种通信协议，可以在应用之间进行通信&lt;/li&gt;
  &lt;li&gt;平台独立性&lt;/li&gt;
  &lt;li&gt;语言独立性&lt;/li&gt;
  &lt;li&gt;简单和可扩展性&lt;/li&gt;
  &lt;li&gt;允许通过防火墙&lt;/li&gt;
  &lt;li&gt;遵循W3C标准&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（2）UDDI(Universal Description,Discovery and Integration）&lt;br /&gt;
用来管理，分发，查询 WebService&lt;br /&gt;
（3）WSDL（Web Services Description Languange）&lt;a href=&quot;https://www.w3.org/TR/2007/REC-wsdl20-primer-20070626/&quot;&gt;WSDL&lt;/a&gt;&lt;br /&gt;
用来描述如何访问具体的接口&lt;/p&gt;

&lt;h4 id=&quot;3应用实例&quot;&gt;3、应用实例&lt;/h4&gt;

&lt;p&gt;一个简单的账户管理和订单处理系统，会计人员用客户端（JSP或者其它）来创建新的账户，并且键入新的客户订单&lt;br /&gt;
订单处理系统使用Java实现在其它电脑上并且与数据库进行交互&lt;br /&gt;
我们采用以下步骤进行构建：&lt;br /&gt;
1、客户端程序将账户注册信息捆绑到SOAP消息中&lt;br /&gt;
2、将SOAP消息作为HTTP POST请求的消息体发送到 WebService端&lt;br /&gt;
3、WebService端解包SOAP请求 并且将其转换为应用可以理解的命令&lt;br /&gt;
4、WebService端处理请求 并且将响应信息放入另一个SOAP中响应给用户&lt;br /&gt;
5、用户得到相应的数据，并且解包呈现出来&lt;/p&gt;
&lt;h4 id=&quot;4为什么使用webservice&quot;&gt;4、为什么使用WebService&lt;/h4&gt;
&lt;p&gt;1、可以暴露已有的方法到网络上&lt;br /&gt;
2、互通性，允许多个应用相互之间进行通信，不限于系统和语言&lt;br /&gt;
3、采用标准化协议&lt;br /&gt;
4、相互通讯消耗低&lt;br /&gt;
5、基于XML，使得跨系统，跨语言通信不受限制&lt;br /&gt;
6、低耦合&lt;br /&gt;
7、粗粒度&lt;br /&gt;
8、能够同步或异步&lt;br /&gt;
9、支持远程过程调用&lt;br /&gt;
10、支持文档交换，表现在 XML不仅可以存放数据，也可以存放长文本&lt;/p&gt;

&lt;h4 id=&quot;5快速开始&quot;&gt;5、快速开始&lt;/h4&gt;

&lt;p&gt;(1) 环境配置&lt;br /&gt;
Eclipse+Tomcat+Axis2(&lt;a href=&quot;http://axis.apache.org/axis2/java/core/download.cgi&quot;&gt;axis2&lt;/a&gt; )&lt;br /&gt;
Axis2选择 Binary Distribution&lt;br /&gt;
Eclips中Axis2配置 &lt;br /&gt;
windows-&amp;gt;prefrence-&amp;gt;Axis2 Preferences-&amp;gt;Browse(D:/axis2-1.7.8 自己解压的位置)-&amp;gt;Apply&lt;br /&gt;
（2） 创建项目&lt;br /&gt;
    a. 创建java项目， Javaproject 或者 Dynamic项目均可。&lt;br /&gt;
    b. 右键项目 new Web Service，配置Tomcat，Axis等，如图：&lt;br /&gt;
    &lt;img src=&quot;/styles/images/2018-7-26/2018-07-26_113237.jpg&quot; alt=&quot;deploy&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（3）  服务器端实现&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nwpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebService&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Caculate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebMethod&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebMethod&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nwpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebService&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CaculateImpl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Caculate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;（4）  服务端点注册&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nwpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nwpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Caculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nwpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CaculateImpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	 &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Caculate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ca&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CaculateImpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://1X.2X.1XX.1XX:8080/Caculate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ca&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;（5） 客户端生成&lt;br /&gt;
新建项目-&amp;gt;右键SRc-&amp;gt;Show in Terminal&lt;br /&gt;
然后在终端输入 wsimport -keep http://1X.2X.1XX.1XX:8080/Caculate?wsdl&lt;br /&gt;
刷新项目 即可看见自动生成的包&lt;br /&gt;
如图:&lt;br /&gt;
  &lt;img src=&quot;/styles/images/2018-7-26/1.jpg&quot; alt=&quot;deploy&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在Test.java中实现主函数进行测试&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nwpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;CaculateImplService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CaculateImplService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;CaculateImpl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getCaculateImplPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参考文献&lt;br /&gt;
 &lt;a href=&quot;https://www.tutorialspoint.com/webservices/web_services_summary.htm&quot;&gt;https://www.tutorialspoint.com/webservices/web_services_summary.htm&lt;/a&gt; 
&lt;a href=&quot;https://blog.csdn.net/xw13106209/article/details/7049614&quot;&gt; https://blog.csdn.net/xw13106209/article/details/7049614&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 26 Jul 2018 14:37:01 +0800</pubDate>
        <link>http://localhost:4000/2018/07/26/start-webservice/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/07/26/start-webservice/</guid>
        
        <category>Web Service</category>
        
        
        <category>教程</category>
        
      </item>
    
      <item>
        <title>简单的搭建一个FTP服务器</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-安装ftp&quot; id=&quot;markdown-toc-1-安装ftp&quot;&gt;1. 安装ftp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-使用dos命令进行提交&quot; id=&quot;markdown-toc-2-使用dos命令进行提交&quot;&gt;2. 使用dos命令进行提交&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-ubuntu终端中文乱码的问题&quot; id=&quot;markdown-toc-3-ubuntu终端中文乱码的问题&quot;&gt;3. Ubuntu终端中文乱码的问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;想让自己的台式机跟自己的笔记本可以进行文件传输  虽然QQ什么挺好的吧  但是Ubuntu上下载个QQ感觉怪怪的，因此动手搭建自己的Ubuntu ftp服务器并记录下自己搭建的过程&lt;/p&gt;
&lt;h4 id=&quot;1-安装ftp&quot;&gt;1. 安装ftp&lt;/h4&gt;
&lt;p&gt;1.安装：sudo apt install vsftpd&lt;br /&gt;
2.配置 vsftpd.conf&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	#禁止匿名访问
	anonymous_enable=NO
	#接受本地用户
	local_enable=YES
	#允许上传
	write_enable=YES
	#用户只能访问限制的目录
	chroot_local_user=YES
	#设置固定目录，在结尾添加。如果不添加这一行，各用户对应自己的目录，当然这个文件夹自己建
	local_root=/home/ftp&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.添加ftp用户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo useradd -d /home/ftp -M ftpuser
sudo passwd ftpuser&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.修改文件夹权限&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo chmod 777 /home/ftp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;5.修改 pam.d/vsftpd&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo gedit /etc/pam.d/vsftpd
注释掉auth required pam_shells.so
 #auth required pam_shells.so&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6.重启 vsftpd&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo service vsftpd restart&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;此时就可以使用刚才建的这个用户登录ftp服务器了 看到的是 local_root 设置的/home/ftp  并且限制在该目录&lt;br /&gt;
可以通过以下几种方法进行访问&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;在浏览器中输入 ftp://XXXX.XXXX.XXXX.XXX进行访问&lt;/li&gt;
  &lt;li&gt;也可以在dos命令下访问&lt;/li&gt;
  &lt;li&gt;使用flashFXP进行文件的提交&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;2-使用dos命令进行提交&quot;&gt;2. 使用dos命令进行提交&lt;/h4&gt;
&lt;p&gt;在c:\Windows\System32\drivers\etc下的hosts文件添加IP地址的配置
xx.xx.xx.xx nwpu&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\Users\wq&amp;gt;ftp nwpu
连接到 nwpu
220 (vsFTPd 3.0.3)
用户(10.13.34.11:(none)): xx
331 Please specify the password.
密码:
230 Login successful.
ftp&amp;gt; dir
200 PORT command successful. Consider using PASV.
150 Here comes the directory listing.
-rw-------    1 1003     1003      1733488 Apr 10 13:47 2.zip
-rw-------    1 1003     1003          230 Apr 09  2017 const修饰的成员函数剖解.
txt
drwxr-xr-x    2 0        0            4096 Jul 05 20:17 data
226 Directory send OK.
ftp: 收到 210 字节，用时 0.00秒 70.00千字节/秒。
ftp&amp;gt; send d:/ftp/a.txt
200 PORT command successful. Consider using PASV.
150 Ok to send data.
226 Transfer complete.
ftp: 发送 4 字节，用时 0.04秒 0.10千字节/秒。&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;3-ubuntu终端中文乱码的问题&quot;&gt;3. Ubuntu终端中文乱码的问题&lt;/h4&gt;
&lt;p&gt;这是因为Windows默认的编码格式是GBK格式 而Ubuntu默认的编码格式是UTF-8，因此导致乱码。&lt;br /&gt;
解决方案：&lt;br /&gt;
	在windows下 使用notepad++ 将文件的编码改成UTF-8再进行发送，
	需编码格式一直才不会产生乱码的现象&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Jul 2018 14:37:01 +0800</pubDate>
        <link>http://localhost:4000/2018/07/10/build-my-ftp-server/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/07/10/build-my-ftp-server/</guid>
        
        <category>ftp</category>
        
        
        <category>教程</category>
        
      </item>
    
      <item>
        <title>Build Python Environment</title>
        <description>
</description>
        <pubDate>Tue, 10 Jul 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/07/10/build-python-environment/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/07/10/build-python-environment/</guid>
        
        
      </item>
    
      <item>
        <title>WebSocket使用教程</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-为什么要使用websocket&quot; id=&quot;markdown-toc-1-为什么要使用websocket&quot;&gt;1、 为什么要使用websocket&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-websocket-是如何进行工作的呢&quot; id=&quot;markdown-toc-2-websocket-是如何进行工作的呢&quot;&gt;2、 websocket 是如何进行工作的呢&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-编写第一个demo&quot; id=&quot;markdown-toc-3-编写第一个demo&quot;&gt;3、 编写第一个Demo&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#a-热身&quot; id=&quot;markdown-toc-a-热身&quot;&gt;a 、热身&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#b第一个demo&quot; id=&quot;markdown-toc-b第一个demo&quot;&gt;b、第一个demo&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考博客： &lt;a href=&quot;https://blog.csdn.net/u014316363/article/details/43408325 &quot;&gt;https://blog.csdn.net/u014316363/article/details/43408325 &lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-为什么要使用websocket&quot;&gt;1、 为什么要使用websocket&lt;/h2&gt;
&lt;p&gt;传统的浏览器，是我们在浏览器端向服务器端请求数据，服务器端再将数据发送过来，随着对实时通信的需求，我们需要当服务器端的数据发生变化时，便将数据推送到浏览器端。这时我们想到的办法是建立长传机制，在服务器仍然有数据发送的时候，服务器与浏览器之间保持http连接，但是http连接的开销过大， 每次都需要发送http头和cookie数据 ，这无疑大大的加大了实际发送给服务器的数据量。为了解决这一问题，国际互联网工程任务组（The Internet Engineering Task Force，简称 IETF）设计了新的标准 也就是websocket，详见： &lt;a href=&quot;http://www.oracle.com/technetwork/articles/java/jsr356-1937161.html&quot;&gt;JSR 356, Java API for WebSocket&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-websocket-是如何进行工作的呢&quot;&gt;2、 websocket 是如何进行工作的呢&lt;/h2&gt;
&lt;p&gt;客户端建立websocket连接是通过 websocket握手过程建立的&lt;br /&gt;
WebSocket握手过程&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;首先是由客户端发送常规的HTTP请求给服务器端，这个请求中包含了升级的头部，它告诉了服务器  希望建立websocket连接&lt;br /&gt;
以下为请求建立连接的头部&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;
GET ws://websocket.example.com/ HTTP/1.1
Origin: http://example.com
Connection: Upgrade
Host: websocket.example.com
Upgrade: websocket
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;值得注意的是websocket使用的是  ws的方案，而wss是类似于 https一样的更为安全的方案&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果服务器支持websocket协议 并且同意与浏览器建立websocket连接   则响应该请求&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;	
	HTTP/1.1 101 WebSocket Protocol Handshake
	Date: Wed, 16 Oct 2013 10:07:34 GMT
	Connection: Upgrade
	Upgrade: WebSocket
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样就建立了像http一样的连接 并且可以进行发送数据  与http连接相似的是  他们都是建立在tcp/ip连接上&lt;/p&gt;

&lt;p&gt;那怎么可以保证websocket传输的可靠性呢？&lt;br /&gt;
为了保证这些信息可以正确的被重构，每一个帧都有4-12个字节的数据作为前缀，利用这种基于帧的数据传送，可以有效的减少无用数据的传送。&lt;br /&gt;
如图：一个服务器可以连接好几个客户端  客户端可以用实现符合RFC 6455规范  与服务器端进行通信&lt;br /&gt;
&lt;img src=&quot;/styles/images/websocket/websocket_conmu.png&quot; alt=&quot;websocket_commu&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-编写第一个demo&quot;&gt;3、 编写第一个Demo&lt;/h2&gt;
&lt;h4 id=&quot;a-热身&quot;&gt;a 、热身&lt;/h4&gt;
&lt;p&gt;（1）建立连接&lt;br /&gt;
使用js建立连接&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var ws = 
			new WebSocket('ws://localhost:8080/websocketdemo02/websocket');&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以将其放在button里面,手动点击建立连接即封装成一个函数，也可以放在js代码段的最前面，页面加载时便建立了连接。&lt;br /&gt;
服务器端实现：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@ServerEndpoint(value=&quot;/chat&quot;,encoders=MessageEncoder.class,decoders=MessageDecoder.class)
public class MyServer {
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以通过ws://localhost:8080/项目名称/chat 与其建立连接&lt;br /&gt;
若在其他主机上 则可以通过 IP地址进行连接   var ws=new WebSocket(‘ws://XXXX.XXXX.XXXX.XXXX/项目名称/chat’)&lt;br /&gt;
（2）常用方法说明&lt;br /&gt;
onOpen()  当连接建立成功后调用该函数；&lt;br /&gt;
	服务器端:被@OnOpen()注解的函数&lt;em&gt;**&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@OnOpen
	public void onOpen(Session session) {
		System.out.println(String.format(&quot;%s jioned the chat room.&quot;,session.getId()));
		peers.add(session);
	}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;客户端：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ws.onopen=function(event){

}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要注意的是  websocket是事件驱动的API   我们既可以采用注解，也可以采用接口驱动 这里我们采用接口驱动&lt;/p&gt;

&lt;p&gt;onMessage()  当接收到信息时自动调用该函数；&lt;br /&gt;
	服务器端：被@OnMessage注解的函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@OnMessage
	public void onMessage(String str,Session session) throws IOException,EncodeException, DecodeException{
		//broadcast the message  除了自己之外的别人都接受到消息
		System.out.println(str);
			for(Session peer:peers) {
			if(!session.getId().equals(peer.getId())) {
				peer.getBasicRemote().sendText(str);
			}
		}
	}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;static Set&lt;Session&gt; peers=Collections.synchronizedSet(new HashSet&lt;Session&gt;());可以记录所有的连接到该服务端的 session  
客户端 :&lt;/Session&gt;&lt;/Session&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//接收到消息的回调方法
	ws.onmessage=function(event){
		//alert(&quot;onmessage&quot;);//有消息发送过来时才调用该函数
		console.log(event.data);//
		var obj=JSON.parse(event.data);
		$(&quot;#ct&quot;).html(obj.message);
	}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OnClose() 函数关闭时自动调用该函数；&lt;br /&gt;
	服务器端：被 @OnClose注解的函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@OnClose
	public void OnClose(Session session) throws IOException,EncodeException{
		System.out.println(String.format(&quot;%s left the chat root.&quot;,session.getId()));
		peers.remove(session);
		
		for(Session peer:peers) {
			Message message=new Message();
			message.setSender(&quot;server&quot;);
			message.setContent(String.format(&quot;%s left the chat room&quot;,(String)session.getUserProperties().get(&quot;user&quot;)));
			message.setRecieved(new Date());
			peer.getBasicRemote().sendObject(message);
		}
	}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;客户端：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/连接关闭的回调方法
      websocket.onclose = function () {
          setMessageInnerHTML(&quot;WebSocket连接关闭&quot;);
      }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;onError() 连接发生错误时调用该函数。&lt;br /&gt;
服务器端：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@OnError
	public void onError () {
	}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;客户端：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ws.onerror=function(event){
		alert(&quot;erorr&quot;);
	}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（3）发送消息&lt;br /&gt;
在js中发送字符串&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exampleSocket.onopen = function (event) {
  exampleSocket.send(&quot;Here's some text that the server is urgently awaiting!&quot;); 
};&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在js中通过websocket发送JSON格式的数据&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function sendText() {
  // Construct a msg object containing the data the server needs to process the message from the chat client.
  var msg = {
    type: &quot;message&quot;,
    text: document.getElementById(&quot;text&quot;).value,
    id:   clientID,
    date: Date.now()
  };

  // Send the msg object as a JSON-formatted string.
  exampleSocket.send(JSON.stringify(msg));
  
  // Blank the text input element, ready to receive the next line of text from the user.
  document.getElementById(&quot;text&quot;).value = &quot;&quot;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Js中对JSON格式的数据进行解析&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exampleSocket.onmessage = function(event) {
  var f = document.getElementById(&quot;chatbox&quot;).contentDocument;
  var text = &quot;&quot;;
  var msg = JSON.parse(event.data);
  var time = new Date(msg.date);
  var timeStr = time.toLocaleTimeString();
  
  switch(msg.type) {
    case &quot;id&quot;:
      clientID = msg.id;
      setUsername();
      break;
    case &quot;username&quot;:
      text = &quot;&lt;b&gt;User &lt;em&gt;&quot; + msg.name + &quot;&lt;/em&gt; signed in at &quot; + timeStr + &quot;&lt;/b&gt;&lt;br /&gt;&quot;;
      break;
    case &quot;message&quot;:
      text = &quot;(&quot; + timeStr + &quot;) &lt;b&gt;&quot; + msg.name + &quot;&lt;/b&gt;: &quot; + msg.text + &quot;&lt;br /&gt;&quot;;
      break;
    case &quot;rejectusername&quot;:
      text = &quot;&lt;b&gt;Your username has been set to &lt;em&gt;&quot; + msg.name + &quot;&lt;/em&gt; because the name you chose is in use.&lt;/b&gt;&lt;br /&gt;&quot;
      break;
    case &quot;userlist&quot;:
      var ul = &quot;&quot;;
      for (i=0; i &amp;lt; msg.users.length; i++) {
        ul += msg.users[i] + &quot;&lt;br /&gt;&quot;;
      }
      document.getElementById(&quot;userlistbox&quot;).innerHTML = ul;
      break;
  }
  
  if (text.length) {
    f.write(text);
    document.getElementById(&quot;chatbox&quot;).contentWindow.scrollByPages(1);
  }
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在java后台服务器端向客户端发送数据&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;方法一：
@OnMessage
public String myOnMessage (String txt) {
   return txt.toUpperCase();
}
如果@OnMessage 注解的方法返回值不为空  返回的内容将会被发送


方法二：  
RemoteEndpoint.Basic other = session.getBasicRemote();
other.sendText (&quot;Hello, world&quot;);

发送对象时   sendObject   ……..&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;b第一个demo&quot;&gt;b、第一个demo&lt;/h4&gt;
&lt;p&gt;第一个demo我们编写一个群聊系统我们需要实现的功能是  当一个客户端发送消息，其它的客户端都可以收到。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;创建消息实体类&lt;/li&gt;
  &lt;li&gt;消息转换为json类&lt;/li&gt;
  &lt;li&gt;解析json为消息实体类&lt;/li&gt;
  &lt;li&gt;服务器类&lt;/li&gt;
  &lt;li&gt;客户端&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;项目源码地址  &lt;a href=&quot;https://github.com/WangQi1415/WebSocket/ &quot;&gt;https://github.com/WangQi1415/WebSocket/ &lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Jul 2018 13:31:01 +0800</pubDate>
        <link>http://localhost:4000/2018/07/09/use-websocket-com/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/07/09/use-websocket-com/</guid>
        
        <category>WebSocket</category>
        
        
        <category>教程</category>
        
      </item>
    
  </channel>
</rss>
